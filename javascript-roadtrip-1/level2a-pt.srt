1
00:00:00,290 --> 00:00:00,580
[SINGING]

2
00:00:00,580 --> 00:00:03,890
From the labyrinth of the loops
to the variable valley,

3
00:00:03,890 --> 00:00:05,630
we'll see the cliffs
of value first.

4
00:00:05,630 --> 00:00:07,070
JavaScript's right
up your alley.

5
00:00:07,070 --> 00:00:10,490
Built-in bluffs, files falls,
array archipelago,

6
00:00:10,490 --> 00:00:12,680
declarations in a desert
where you'll find out

7
00:00:12,680 --> 00:00:13,670
how far you'll go.

8
00:00:13,670 --> 00:00:14,510
Learn the program.

9
00:00:14,510 --> 00:00:15,700
Take a ride.

10
00:00:15,700 --> 00:00:16,440
Buy a ticket, step inside.

11
00:00:16,440 --> 00:00:18,260
All aboard, you're
at the station to

12
00:00:18,260 --> 00:00:20,070
increase your education.

13
00:00:20,070 --> 00:00:22,510
Bon voyage and skinny dip!
As long as functions

14
00:00:22,510 --> 00:00:23,300
you don't skimp on

15
00:00:23,300 --> 00:00:27,480
this, the JavaScript ... Road Trip.

16
00:00:34,220 --> 00:00:35,350
Howdy, road trippers.

17
00:00:35,350 --> 00:00:36,530
Hope you enjoyed level one.

18
00:00:36,530 --> 00:00:39,050
And now you know how to make
some data, but we need to know

19
00:00:39,050 --> 00:00:39,990
where to store it.

20
00:00:39,990 --> 00:00:42,100
So, that's what we're going
to do in the next level.

21
00:00:42,100 --> 00:00:44,660
Here comes level two,
Variable Calley.

22
00:00:47,270 --> 00:00:51,580
JavaScript uses variables to
store and manage data.

23
00:00:51,580 --> 00:00:55,260
You can see here a basic
assignment syntax for a

24
00:00:55,260 --> 00:00:58,020
variable called trainWhistles.

25
00:00:58,020 --> 00:01:00,810
That var is the variable
keyword.

26
00:01:00,810 --> 00:01:04,250
It's what tells the browser to
set some space aside for the

27
00:01:04,250 --> 00:01:05,970
variable itself.

28
00:01:05,970 --> 00:01:08,780
The next thing you see is
the trainWhistles' name.

29
00:01:08,780 --> 00:01:10,980
That's the name of
the variable.

30
00:01:10,980 --> 00:01:13,600
The equal sign is the
assignment operator.

31
00:01:13,600 --> 00:01:16,240
Notice that it's a single
equal sign.

32
00:01:16,240 --> 00:01:18,340
And lastly, the value 3.

33
00:01:18,340 --> 00:01:21,490
That's the value that's going
to be stored inside our

34
00:01:21,490 --> 00:01:22,740
variable trainWhistles.

35
00:01:25,690 --> 00:01:28,430
Now when we call the variable
trainWhistles, we

36
00:01:28,430 --> 00:01:30,915
automatically get a value
of three returned to us.

37
00:01:34,850 --> 00:01:37,950
Now there are some rules and
regulations that we follow in

38
00:01:37,950 --> 00:01:40,670
JavaScript for naming
variables.

39
00:01:40,670 --> 00:01:43,760
The first is that we can't
have any spaces in the

40
00:01:43,760 --> 00:01:45,390
variable name.

41
00:01:45,390 --> 00:01:47,850
The compiler will return an
error to you if you try to put

42
00:01:47,850 --> 00:01:50,730
spaces inside a variable name.

43
00:01:50,730 --> 00:01:53,600
The next thing is that we can't
have any digits at the

44
00:01:53,600 --> 00:01:55,580
front of our variable names.

45
00:01:55,580 --> 00:01:56,360
We don't like that.

46
00:01:56,360 --> 00:01:58,850
The compiler doesn't
like that.

47
00:01:58,850 --> 00:02:00,840
We can use underscores,
although they're often

48
00:02:00,840 --> 00:02:01,700
irritating.

49
00:02:01,700 --> 00:02:06,020
We can use dollar signs,
but don't be that guy.

50
00:02:06,020 --> 00:02:09,090
We can even use dollar signs
and underscores together.

51
00:02:09,090 --> 00:02:12,950
So, this is slightly stupid, but
it's technically legal.

52
00:02:12,950 --> 00:02:15,190
Now here's a great
variable name.

53
00:02:15,190 --> 00:02:18,610
Notice at the beginning is a
lower case letter and every

54
00:02:18,610 --> 00:02:21,400
subsequent word is
capitalized.

55
00:02:21,400 --> 00:02:24,890
You may have heard this referred
to as camel case.

56
00:02:24,890 --> 00:02:27,130
And then this final variable
name uses a

57
00:02:27,130 --> 00:02:29,370
digit at the very end.

58
00:02:29,370 --> 00:02:30,620
Fatality.

59
00:02:33,660 --> 00:02:36,500
What if we wanted to change
a variable's contents?

60
00:02:36,500 --> 00:02:37,100
Guess what?

61
00:02:37,100 --> 00:02:38,770
It is your lucky day.

62
00:02:38,770 --> 00:02:42,910
Currently our trainWhistles
variable is set to 3.

63
00:02:42,910 --> 00:02:46,370
But if we wanted to change our
trainWhistles amount, we just

64
00:02:46,370 --> 00:02:49,520
reuse the assignment
operator and set it

65
00:02:49,520 --> 00:02:51,630
equal to a new value.

66
00:02:51,630 --> 00:02:55,560
Notice that we don't use the
var key word because the

67
00:02:55,560 --> 00:02:59,180
console already knows that the
variable trainWhistles is

68
00:02:59,180 --> 00:03:01,350
inside memory.

69
00:03:01,350 --> 00:03:04,350
Now our trainWhistles
value is 9.

70
00:03:04,350 --> 00:03:08,130
We can also use the
trainWhistles value itself to

71
00:03:08,130 --> 00:03:11,360
modify the contents of the
trainWhistles variable.

72
00:03:11,360 --> 00:03:14,420
Here you can see that we're
saying, take the trainWhistles

73
00:03:14,420 --> 00:03:18,670
value, add 3 to it, and store
it back inside the

74
00:03:18,670 --> 00:03:21,040
trainWhistles variable.

75
00:03:21,040 --> 00:03:24,850
Now because the earlier value of
trainWhistles was 9, we get

76
00:03:24,850 --> 00:03:27,630
9 plus 3 stored in trainWhistles,
which

77
00:03:27,630 --> 00:03:28,880
results in a 12.

78
00:03:32,100 --> 00:03:35,640
Another way to say that exact
same expression is with the

79
00:03:35,640 --> 00:03:38,500
plus equals operator.

80
00:03:38,500 --> 00:03:40,910
That signals to the console
to take the trainWhistles

81
00:03:40,910 --> 00:03:44,190
variable, and add 3 to it, and
store it back inside the

82
00:03:44,190 --> 00:03:46,700
trainWhistles variable.

83
00:03:46,700 --> 00:03:48,510
Now we have 15 total
train whistles.

84
00:03:52,370 --> 00:03:55,100
All of the operations can
be used with variable

85
00:03:55,100 --> 00:03:55,910
assignments.

86
00:03:55,910 --> 00:03:58,560
Here we can see that the
trainWhistles variable is

87
00:03:58,560 --> 00:04:02,000
being multiplied by 2 before
being stored back inside the

88
00:04:02,000 --> 00:04:03,860
trainWhistles variable.

89
00:04:03,860 --> 00:04:06,430
Now we have 30 train whistles.

90
00:04:06,430 --> 00:04:10,540
And again, the times equals
operator is the exact same as

91
00:04:10,540 --> 00:04:12,040
the previous expression.

92
00:04:12,040 --> 00:04:14,700
And we get 60 train whistles.

93
00:04:14,700 --> 00:04:16,829
Whoa, 60 whistles -

94
00:04:16,829 --> 00:04:18,079
that's a lot.

95
00:04:20,220 --> 00:04:23,780
Variable names can also act as
substitutes for the data that

96
00:04:23,780 --> 00:04:25,330
they point to.

97
00:04:25,330 --> 00:04:28,430
That means that I can use
variables inside of

98
00:04:28,430 --> 00:04:31,720
concatenations with strings to
refer to the data that's

99
00:04:31,720 --> 00:04:33,640
actually inside the variable.

100
00:04:33,640 --> 00:04:37,000
Here you can see a concatenation
of "All of our

101
00:04:37,000 --> 00:04:40,410
trains have" with the variable
trainWhistles, and then the

102
00:04:40,410 --> 00:04:42,010
string whistles.

103
00:04:42,010 --> 00:04:43,880
What happens in the output?

104
00:04:43,880 --> 00:04:46,460
"All of our trains
have 3 whistles!"

105
00:04:46,460 --> 00:04:49,970
The variable name disappears and
instead the data that the

106
00:04:49,970 --> 00:04:53,450
variable contains is placed
inside the string.

107
00:04:53,450 --> 00:04:55,240
Additionally, we can place
variables inside of

108
00:04:55,240 --> 00:04:58,610
expressions that are
concatenated with strings.

109
00:04:58,610 --> 00:05:00,850
In this string, when
trainWhistles is multiplied by

110
00:05:00,850 --> 00:05:02,450
3, we get 9.

111
00:05:02,450 --> 00:05:04,540
And in the final string
we see, "But the

112
00:05:04,540 --> 00:05:08,260
Pollock 9000 has 9!"

113
00:05:08,260 --> 00:05:10,560
But wait, this code kind
of sucks a little bit.

114
00:05:10,560 --> 00:05:13,780
Because the Pollock 9000 needs
its own whistles variable.

115
00:05:13,780 --> 00:05:15,620
Let's do that.

116
00:05:15,620 --> 00:05:17,770
All we have to do is declare
a new variable -

117
00:05:17,770 --> 00:05:18,640
we'll call it the pollock9000 -

118
00:05:18,640 --> 00:05:22,460
and then assign that
expression that we were using

119
00:05:22,460 --> 00:05:24,620
in the string to this
new variable.

120
00:05:24,620 --> 00:05:27,230
And now we can see that
the pollock9000

121
00:05:27,230 --> 00:05:28,690
has 9 train whistles.

122
00:05:32,440 --> 00:05:35,420
Now that the pollock9000 has
its own variable, we can use

123
00:05:35,420 --> 00:05:36,850
that inside the string.

124
00:05:41,500 --> 00:05:43,860
There's a simple way to
increase or decrease a

125
00:05:43,860 --> 00:05:46,720
variable's value by 1
in either direction.

126
00:05:46,720 --> 00:05:49,890
This is called incrementing
and decrementing.

127
00:05:49,890 --> 00:05:53,130
Here on the left side, you can
see that we have trainWhistles

128
00:05:53,130 --> 00:05:56,430
plus plus, which is a simple
syntax for increasing a

129
00:05:56,430 --> 00:05:58,660
variable's value by 1.

130
00:05:58,660 --> 00:06:01,030
Now you can see the
trainWhistles value is 4.

131
00:06:01,030 --> 00:06:04,180
If we wanted to decrease the
variable by 1, we would have

132
00:06:04,180 --> 00:06:07,390
used a minus minus syntax, which
would have produced a

133
00:06:07,390 --> 00:06:09,860
value of 2 inside the
trainWhistles variable.

