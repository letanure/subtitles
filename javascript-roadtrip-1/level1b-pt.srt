1
00:00:01,720 --> 00:00:03,240
Em seguida temos strings.

2
00:00:03,240 --> 00:00:06,820
Strings são a maneira do Javascript
de lidar com manipulação, armazenamento e

3
00:00:06,820 --> 00:00:09,270
processamento de texto simples.

4
00:00:09,270 --> 00:00:11,670
Para dizer ao JavaScript
que queremos

5
00:00:11,670 --> 00:00:14,990
processar algum texto, nós
precisamos usar um par de

6
00:00:14,990 --> 00:00:18,220
sinais de aspas envolvendo
o texto que enviamos como

7
00:00:18,220 --> 00:00:20,680
string no console.

8
00:00:20,680 --> 00:00:24,560
Aqui você pode ver duas strings diferentes,
"Raindrops On Roses"

9
00:00:24,560 --> 00:00:26,120
e "Whiskers On Kittens".

10
00:00:26,120 --> 00:00:29,740
Quando envolvemos o texto com
aspas, o JavaScript

11
00:00:29,740 --> 00:00:32,840
reconhece como uma string e
retorna a string

12
00:00:32,840 --> 00:00:34,320
de volta.

13
00:00:34,320 --> 00:00:38,550
Também podemos usar o operador único
de mais com strings

14
00:00:38,550 --> 00:00:40,780
em um processo chamado
concatenação.

15
00:00:40,780 --> 00:00:44,610
Concatenação junta strings
dentro de outra string

16
00:00:44,610 --> 00:00:47,560
e retorna a string resultante
no final.

17
00:00:47,560 --> 00:00:51,440
Aqui você pode ver "Raindrops On Roses"
concatenada com

18
00:00:51,440 --> 00:00:56,290
outra string que tem
espaço concatenada

19
00:00:56,290 --> 00:00:59,530
com outra string que diz
"Whiskers On Kittens".

20
00:00:59,530 --> 00:01:01,750
Como resultado, temos
"Raindrops On Roses

21
00:01:01,750 --> 00:01:03,000
And Whiskers On Kittens".

22
00:01:07,050 --> 00:01:10,530
Agora é hora de uma das minhas
… strings favoritas.

23
00:01:10,530 --> 00:01:13,570
Concatenação também funciona
com números e suas

24
00:01:13,570 --> 00:01:15,530
expresões, também.

25
00:01:15,530 --> 00:01:17,770
Nesse primeiro exemplo, podemos
ver que quando tentamos

26
00:01:17,770 --> 00:01:21,740
concatenar "The meaning of life
is" com o valor "42", nós

27
00:01:21,740 --> 00:01:24,410
conseguimos uma string perfeitamente
válida, mas não

28
00:01:24,410 --> 00:01:27,300
formatada como
queremos.

29
00:01:27,300 --> 00:01:30,880
Parece que nos
falta um espaço.

30
00:01:30,880 --> 00:01:34,400
Como a concatenação nao
insere um espaço para você, tudo

31
00:01:34,400 --> 00:01:37,200
que precisamos fazer para acertar issso é
inserir um espaço no inicio da

32
00:01:37,200 --> 00:01:38,450
primeira string.

33
00:01:41,620 --> 00:01:45,190
Também podemos concatenar
expressões em strings.

34
00:01:45,190 --> 00:01:49,100
No entanto, expressões serão
processadas pelo console.

35
00:01:49,100 --> 00:01:53,830
Como você vê aqui com 0.75,
3/4 foi processado.

36
00:01:53,830 --> 00:01:56,320
Para consertar isso, nós
realmente precisamos colocar a

37
00:01:56,320 --> 00:02:00,030
expressão dentro de uma string
para termos o texto puro

38
00:02:00,030 --> 00:02:05,580
de "3/4" em vez de 0.75.

39
00:02:05,580 --> 00:02:08,160
Quando trabalhando com strings,
você irá precisar de lguns caracteres

40
00:02:08,160 --> 00:02:11,370
especiais para conseguir uma
formatação específica.

41
00:02:11,370 --> 00:02:14,220
Neste exemplo, você pode
ver um  \t, que

42
00:02:14,220 --> 00:02:18,010
representa um avanço
para a próxima parada de tab.

43
00:02:18,010 --> 00:02:20,520
Aqui, no resultado, você pode
ver que o \t'

44
00:02:20,520 --> 00:02:23,810
desapareceu e no seu
lugar existe um avanço para

45
00:02:23,810 --> 00:02:27,750
a próxima parada de tab dentro
da string?

46
00:02:27,750 --> 00:02:29,670
E se precisarmos de
aspas duplas

47
00:02:29,670 --> 00:02:30,980
dentro de nossa string?

48
00:02:30,980 --> 00:02:33,250
Bem, o console busca as
aspas duplas no

49
00:02:33,250 --> 00:02:34,910
início ou no final da string.

50
00:02:34,910 --> 00:02:38,740
Então precisamos de uma maneira especial de
escapar essas  aspas duplas,

51
00:02:38,740 --> 00:02:41,190
então usamos uma barra invertida
antes das aspas

52
00:02:41,190 --> 00:02:43,320
neste caso.

53
00:02:43,320 --> 00:02:46,370
Na nossa saída de resultado, podemos
ver que temos um par de

54
00:02:46,370 --> 00:02:49,380
aspas dentro
da string.

55
00:02:52,560 --> 00:02:54,660
E se quisermos uma barra invertida
dentro da nossa string?

56
00:02:54,660 --> 00:02:57,280
Bem, como este é um caracter
especial, precisamos usar

57
00:02:57,280 --> 00:03:01,450
outra barra invertida para termos
uma barra invertida dentro

58
00:03:01,450 --> 00:03:02,770
da string.

59
00:03:02,770 --> 00:03:05,550
Continuando, temos
um \ n que

60
00:03:05,550 --> 00:03:07,670
representa uma nova linha.

61
00:03:07,670 --> 00:03:10,940
Você pode ver na saída aqui,
que a string está dividida

62
00:03:10,940 --> 00:03:13,820
em múltiplas linhas porcausa
do .


63
00:03:17,090 --> 00:03:19,470
Isto não é um guia
completo dos

64
00:03:19,470 --> 00:03:22,350
caracteres especiais para uso em
formatação de strings, você pode

65
00:03:22,350 --> 00:03:24,770
pesquisar o resto deles
na internet.

66
00:03:24,770 --> 00:03:27,560
Algumas vezes desejamos comparar
strings para fazer ordenação

67
00:03:27,560 --> 00:03:29,820
alfabética ou para encontrar
strings.

68
00:03:29,820 --> 00:03:33,060
O JavaScript permite-nos comparar
strings com um comparador

69
00:03:33,060 --> 00:03:34,640
específico.

70
00:03:34,640 --> 00:03:38,160
Podemos usar um símbolo de igual
duplo para comparar "The Wright

71
00:03:38,160 --> 00:03:41,200
Brothers" com "The Wright
Brothers", que retorna um

72
00:03:41,200 --> 00:03:46,210
valor verdadeiro porque essas
strings são exatamente iguais.

73
00:03:46,210 --> 00:03:48,250
Podemos ver que se usamos um igual
duplo em "The Wright

74
00:03:48,250 --> 00:03:50,760
Brothers" e "Super Mario
Brothers", teremos um

75
00:03:50,760 --> 00:03:52,530
valor falso, porque
essas strings não são

76
00:03:52,530 --> 00:03:54,320
idênticas.

77
00:03:54,320 --> 00:03:55,760
Agora, uma pegadinha.

78
00:03:55,760 --> 00:03:59,520
Se vemos "The Wright Brothers"
comparada com "the wright

79
00:03:59,520 --> 00:04:03,670
brothers" em uma situação de não
iguais, isso irá retornar

80
00:04:03,670 --> 00:04:05,530
um valor verdadeiro.

81
00:04:05,530 --> 00:04:08,470
A razão para isso é que
essas strings não são extamente

82
00:04:08,470 --> 00:04:11,350
as mesmas porque o JavaScript
é sentitivo a maiúsculas

83
00:04:11,350 --> 00:04:12,810
no que se refere a strings.

84
00:04:12,810 --> 00:04:14,060
Então, elas não são iguais.

85
00:04:17,740 --> 00:04:21,120
Também podemos saber o comprimento
de strings usando a

86
00:04:21,120 --> 00:04:22,540
propriedade length .

87
00:04:22,540 --> 00:04:25,570
Você pode ver aqui que se temo
uma palavra inglesa

88
00:04:25,570 --> 00:04:28,450
muito longa,
"antidisestablishmentarianism",

89
00:04:28,450 --> 00:04:31,030
e usamor a propriedade .length,
o resultado no console do JavaScript

90
00:04:31,030 --> 00:04:36,540
irá retornar um belo
valor de 28.

91
00:04:36,540 --> 00:04:39,460
E novamente, em "One
Fish, Two Fish, Red Fish, Blue

92
00:04:39,460 --> 00:04:42,130
Fish", se usarmos a propriedade
.length nela,

93
00:04:42,130 --> 00:04:44,690
o JavaScript irá retornar um 39.

94
00:04:44,690 --> 00:04:47,830
Agora, o que é realmente importante
aqui é que a propriedade .length

95
00:04:47,830 --> 00:04:51,130
irá considerar todos
os espaços e toda

96
00:04:51,130 --> 00:04:55,340
pontuação para determinar
seu comprimento.

97
00:04:55,340 --> 00:04:57,820
Agora, é hora de usar
seus novos conhecimentos

98
00:04:57,820 --> 00:04:59,730
de Javascript na seção
de desafios.

99
00:04:59,730 --> 00:05:01,000
Nos vemos no próximo.

100
00:05:07,550 --> 00:05:08,320
Barras invertidas.

101
00:05:08,320 --> 00:05:11,220
Múltiplos, múltiplos caracteres
especiais usados para

102
00:05:11,220 --> 00:05:11,550
formatação de strings.

103
00:05:11,550 --> 00:05:12,990
Não sei porque vocês estão repetindo essa palavra
[Risadas ao fundo]

